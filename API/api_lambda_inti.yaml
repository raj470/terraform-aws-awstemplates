AWSTemplateFormatVersion: 2010-09-09
Parameters:
  APIName:
    Type: String
    Default: "Testing"
    Description: "Creating an API for lambda intergration testing"
Resources:
  API:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref APIName
      Description: !Ref APIName
      EndpointConfiguration:
        Types: 
          - "REGIONAL"
  APIMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref API 
      ResourceId: !GetAtt API.RootResourceId
      HttpMethod: POST
      AuthorizationType: NONE
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            # method.response.header.Access-Control-Allow-Origin: "true"
            method.response.header.number1: true
            method.response.header.number2: true
      #     ResponseModels:
      #       application/json: 'Empty'
      # RequestParameters:
      #   method.request.header.number1: true
      #   method.request.header.number2: true
      Integration:
        Type: AWS
        Uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${DynamoDBLambda}/invocations"
        IntegrationHttpMethod: POST
        Credentials: !GetAtt APIGatewayIAMRole.Arn
        # RequestParameters:
        #   "integration.response.header.number1": "method.response.header.number1"
        #   "integration.response.header.number2": "method.response.header.number2"
        IntegrationResponses:
          - StatusCode: 200
            # ResponseTemplates:
            #   application/json: |
            #     {
            #       "number1": "$input.params('number1')",
            #       "number2": "$input.params('number2')"
            #     }
        #     ResponseParameters:
        # #       #method.response.header.Access-Control-Allow-Origin: "true"
        #         "integration.response.header.number1": "method.response.header.number1"
        #         "integration.response.header.number2": "method.response.header.number2"
      OperationName: "Dev_testing"
      RequestValidatorId: !Ref RequestValidatorAPI
  #API Stage
  RestAPIStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref API
      # AccessLogSetting:
      #   DestinationArn: !GetAtt LogGroup.Arn
      DeploymentId: !Ref APIDeployment
      StageName: 'Test'
      MethodSettings:
        - ResourcePath: /*
          HttpMethod: '*'
          MetricsEnabled: true
          DataTraceEnabled: true
          LoggingLevel: INFO
  #API Gateway Deployment
  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - APIMethod
    Properties:
      RestApiId: !Ref API
  #Log Group for API Logs
  # LogGroup:
  #   Type: AWS::Logs::LogGroup
  #   Properties:
  #     #RetentionInDays: 14
  #     LogGroupName: !Sub /aws/apigateway/${APIName}
  RequestValidatorAPI:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      Name: "Intergration_request_validator"
      RestApiId: !Ref API
      ValidateRequestBody: true
      ValidateRequestParameters: true
  APIModelRequest:
    Type: AWS::ApiGateway::Model
    Properties:
      RestApiId: !Ref API
      ContentType: application/json
  DynamoDBLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: "DynamoDBLambda"
      PackageType: Zip
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import json
          import uuid
          import boto3
          import logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)
          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table('lambda_table')
          def lambda_handler(event, context):
            try:
              logger.info(f"Event received: {json.dumps(event)}")
              number1 = event.get('number1')
              number2 = event.get('number2')
              # number1 = int(num1)
              # number2 = int(num2)
              # logger.info(f"Number 1: {number1}")
              # logger.info(f"Number 2: {number2}")
              # number1 = int(number1) if number1 is not None else None
              # number2 = int(number2) if number2 is not None else None
              if number1 is None or number2 is None:
                raise ValueError("Both number1 and number2 must be provided.")
              sum_result = number1 + number2  
              transaction_id = str(uuid.uuid4())
              logger.info(f"Number 1: {number1}")
              logger.info(f"Number 2: {number2}")
              logger.info(f"Sum: {sum_result}")
              logger.info(f"Transaction ID: {transaction_id}")
              table.put_item(
                Item={
                  'TransactionId': transaction_id,
                  'Number1': number1,
                  'Number2': number2,
                  'Sum': sum_result
                }
              )
              return {
                'statusCode': 200,
                'body': json.dumps('Transaction recorded successfully!')
              }
            except Exception as e:
                logger.error(f"Error: {str(e)}")
                return {
                  'statusCode': 500,
                  'body': json.dumps(f"Error: {str(e)}")
                }
      Role: !GetAtt LambdaFunctionExecutionRole.Arn
      Architectures:
        - x86_64
      Runtime: python3.12
      Timeout: 10
      LoggingConfig:
        ApplicationLogLevel: TRACE
        LogFormat: JSON
        LogGroup: DynamoDBlambda_logs
        SystemLogLevel: DEBUG
  LambdaFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaKinesisExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole
        - arn:aws:iam::aws:policy/AmazonKinesisAnalyticsFullAccess
        - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
  APIGatewayIAMRole:
    Type: AWS::IAM::Role
    Properties:
      # PolicyName: 
      RoleName: "API_Lambda_Invoke"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - apigateway.amazonaws.com
  APIPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: 'Allow'
            Action: 
              - 'lambda:*'
            Resource: "*"
      PolicyName: "APIInvokeLambda"
      Roles:
        - !Ref APIGatewayIAMRole
